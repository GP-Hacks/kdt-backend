// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/proto/kdt.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_SendMessage_FullMethodName = "/api.ChatService/SendMessage"
	ChatService_HealthCheck_FullMethodName = "/api.ChatService/HealthCheck"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ChatService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
type ChatServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ChatService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/kdt.proto",
}

const (
	PlacesService_GetPlaces_FullMethodName     = "/api.PlacesService/GetPlaces"
	PlacesService_GetCategories_FullMethodName = "/api.PlacesService/GetCategories"
	PlacesService_BuyTicket_FullMethodName     = "/api.PlacesService/BuyTicket"
	PlacesService_HealthCheck_FullMethodName   = "/api.PlacesService/HealthCheck"
)

// PlacesServiceClient is the client API for PlacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlacesServiceClient interface {
	GetPlaces(ctx context.Context, in *GetPlacesRequest, opts ...grpc.CallOption) (*GetPlacesResponse, error)
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	BuyTicket(ctx context.Context, in *BuyTicketRequest, opts ...grpc.CallOption) (*BuyTicketResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type placesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlacesServiceClient(cc grpc.ClientConnInterface) PlacesServiceClient {
	return &placesServiceClient{cc}
}

func (c *placesServiceClient) GetPlaces(ctx context.Context, in *GetPlacesRequest, opts ...grpc.CallOption) (*GetPlacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlacesResponse)
	err := c.cc.Invoke(ctx, PlacesService_GetPlaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placesServiceClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, PlacesService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placesServiceClient) BuyTicket(ctx context.Context, in *BuyTicketRequest, opts ...grpc.CallOption) (*BuyTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuyTicketResponse)
	err := c.cc.Invoke(ctx, PlacesService_BuyTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placesServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, PlacesService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlacesServiceServer is the server API for PlacesService service.
// All implementations must embed UnimplementedPlacesServiceServer
// for forward compatibility.
type PlacesServiceServer interface {
	GetPlaces(context.Context, *GetPlacesRequest) (*GetPlacesResponse, error)
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	BuyTicket(context.Context, *BuyTicketRequest) (*BuyTicketResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedPlacesServiceServer()
}

// UnimplementedPlacesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlacesServiceServer struct{}

func (UnimplementedPlacesServiceServer) GetPlaces(context.Context, *GetPlacesRequest) (*GetPlacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaces not implemented")
}
func (UnimplementedPlacesServiceServer) GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedPlacesServiceServer) BuyTicket(context.Context, *BuyTicketRequest) (*BuyTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTicket not implemented")
}
func (UnimplementedPlacesServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPlacesServiceServer) mustEmbedUnimplementedPlacesServiceServer() {}
func (UnimplementedPlacesServiceServer) testEmbeddedByValue()                       {}

// UnsafePlacesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlacesServiceServer will
// result in compilation errors.
type UnsafePlacesServiceServer interface {
	mustEmbedUnimplementedPlacesServiceServer()
}

func RegisterPlacesServiceServer(s grpc.ServiceRegistrar, srv PlacesServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlacesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlacesService_ServiceDesc, srv)
}

func _PlacesService_GetPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacesServiceServer).GetPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlacesService_GetPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacesServiceServer).GetPlaces(ctx, req.(*GetPlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlacesService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacesServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlacesService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacesServiceServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlacesService_BuyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacesServiceServer).BuyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlacesService_BuyTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacesServiceServer).BuyTicket(ctx, req.(*BuyTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlacesService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacesServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlacesService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacesServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlacesService_ServiceDesc is the grpc.ServiceDesc for PlacesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlacesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PlacesService",
	HandlerType: (*PlacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlaces",
			Handler:    _PlacesService_GetPlaces_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _PlacesService_GetCategories_Handler,
		},
		{
			MethodName: "BuyTicket",
			Handler:    _PlacesService_BuyTicket_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _PlacesService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/kdt.proto",
}

const (
	CharityService_GetCollections_FullMethodName = "/api.CharityService/GetCollections"
	CharityService_GetCategories_FullMethodName  = "/api.CharityService/GetCategories"
	CharityService_Donate_FullMethodName         = "/api.CharityService/Donate"
	CharityService_HealthCheck_FullMethodName    = "/api.CharityService/HealthCheck"
)

// CharityServiceClient is the client API for CharityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharityServiceClient interface {
	GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error)
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	Donate(ctx context.Context, in *DonateRequest, opts ...grpc.CallOption) (*DonateResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type charityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharityServiceClient(cc grpc.ClientConnInterface) CharityServiceClient {
	return &charityServiceClient{cc}
}

func (c *charityServiceClient) GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectionsResponse)
	err := c.cc.Invoke(ctx, CharityService_GetCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charityServiceClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, CharityService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charityServiceClient) Donate(ctx context.Context, in *DonateRequest, opts ...grpc.CallOption) (*DonateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonateResponse)
	err := c.cc.Invoke(ctx, CharityService_Donate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charityServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, CharityService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharityServiceServer is the server API for CharityService service.
// All implementations must embed UnimplementedCharityServiceServer
// for forward compatibility.
type CharityServiceServer interface {
	GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error)
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	Donate(context.Context, *DonateRequest) (*DonateResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedCharityServiceServer()
}

// UnimplementedCharityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharityServiceServer struct{}

func (UnimplementedCharityServiceServer) GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedCharityServiceServer) GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedCharityServiceServer) Donate(context.Context, *DonateRequest) (*DonateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Donate not implemented")
}
func (UnimplementedCharityServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCharityServiceServer) mustEmbedUnimplementedCharityServiceServer() {}
func (UnimplementedCharityServiceServer) testEmbeddedByValue()                        {}

// UnsafeCharityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharityServiceServer will
// result in compilation errors.
type UnsafeCharityServiceServer interface {
	mustEmbedUnimplementedCharityServiceServer()
}

func RegisterCharityServiceServer(s grpc.ServiceRegistrar, srv CharityServiceServer) {
	// If the following call pancis, it indicates UnimplementedCharityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CharityService_ServiceDesc, srv)
}

func _CharityService_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharityServiceServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharityService_GetCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharityServiceServer).GetCollections(ctx, req.(*GetCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharityService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharityServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharityService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharityServiceServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharityService_Donate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharityServiceServer).Donate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharityService_Donate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharityServiceServer).Donate(ctx, req.(*DonateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharityService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharityServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharityService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharityServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharityService_ServiceDesc is the grpc.ServiceDesc for CharityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CharityService",
	HandlerType: (*CharityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollections",
			Handler:    _CharityService_GetCollections_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _CharityService_GetCategories_Handler,
		},
		{
			MethodName: "Donate",
			Handler:    _CharityService_Donate_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _CharityService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/kdt.proto",
}

const (
	VotesService_GetVotes_FullMethodName        = "/api.VotesService/GetVotes"
	VotesService_GetRateInfo_FullMethodName     = "/api.VotesService/GetRateInfo"
	VotesService_GetPetitionInfo_FullMethodName = "/api.VotesService/GetPetitionInfo"
	VotesService_GetChoiceInfo_FullMethodName   = "/api.VotesService/GetChoiceInfo"
	VotesService_VoteRate_FullMethodName        = "/api.VotesService/VoteRate"
	VotesService_VotePetition_FullMethodName    = "/api.VotesService/VotePetition"
	VotesService_VoteChoice_FullMethodName      = "/api.VotesService/VoteChoice"
	VotesService_HealthCheck_FullMethodName     = "/api.VotesService/HealthCheck"
)

// VotesServiceClient is the client API for VotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotesServiceClient interface {
	GetVotes(ctx context.Context, in *GetVotesRequest, opts ...grpc.CallOption) (*GetVotesResponse, error)
	GetRateInfo(ctx context.Context, in *GetVoteInfoRequest, opts ...grpc.CallOption) (*GetRateInfoResponse, error)
	GetPetitionInfo(ctx context.Context, in *GetVoteInfoRequest, opts ...grpc.CallOption) (*GetPetitionInfoResponse, error)
	GetChoiceInfo(ctx context.Context, in *GetVoteInfoRequest, opts ...grpc.CallOption) (*GetChoiceInfoResponse, error)
	VoteRate(ctx context.Context, in *VoteRateRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePetition(ctx context.Context, in *VotePetitionRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteChoice(ctx context.Context, in *VoteChoiceRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type votesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotesServiceClient(cc grpc.ClientConnInterface) VotesServiceClient {
	return &votesServiceClient{cc}
}

func (c *votesServiceClient) GetVotes(ctx context.Context, in *GetVotesRequest, opts ...grpc.CallOption) (*GetVotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVotesResponse)
	err := c.cc.Invoke(ctx, VotesService_GetVotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) GetRateInfo(ctx context.Context, in *GetVoteInfoRequest, opts ...grpc.CallOption) (*GetRateInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRateInfoResponse)
	err := c.cc.Invoke(ctx, VotesService_GetRateInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) GetPetitionInfo(ctx context.Context, in *GetVoteInfoRequest, opts ...grpc.CallOption) (*GetPetitionInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPetitionInfoResponse)
	err := c.cc.Invoke(ctx, VotesService_GetPetitionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) GetChoiceInfo(ctx context.Context, in *GetVoteInfoRequest, opts ...grpc.CallOption) (*GetChoiceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChoiceInfoResponse)
	err := c.cc.Invoke(ctx, VotesService_GetChoiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) VoteRate(ctx context.Context, in *VoteRateRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, VotesService_VoteRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) VotePetition(ctx context.Context, in *VotePetitionRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, VotesService_VotePetition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) VoteChoice(ctx context.Context, in *VoteChoiceRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, VotesService_VoteChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, VotesService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotesServiceServer is the server API for VotesService service.
// All implementations must embed UnimplementedVotesServiceServer
// for forward compatibility.
type VotesServiceServer interface {
	GetVotes(context.Context, *GetVotesRequest) (*GetVotesResponse, error)
	GetRateInfo(context.Context, *GetVoteInfoRequest) (*GetRateInfoResponse, error)
	GetPetitionInfo(context.Context, *GetVoteInfoRequest) (*GetPetitionInfoResponse, error)
	GetChoiceInfo(context.Context, *GetVoteInfoRequest) (*GetChoiceInfoResponse, error)
	VoteRate(context.Context, *VoteRateRequest) (*VoteResponse, error)
	VotePetition(context.Context, *VotePetitionRequest) (*VoteResponse, error)
	VoteChoice(context.Context, *VoteChoiceRequest) (*VoteResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedVotesServiceServer()
}

// UnimplementedVotesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVotesServiceServer struct{}

func (UnimplementedVotesServiceServer) GetVotes(context.Context, *GetVotesRequest) (*GetVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotes not implemented")
}
func (UnimplementedVotesServiceServer) GetRateInfo(context.Context, *GetVoteInfoRequest) (*GetRateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateInfo not implemented")
}
func (UnimplementedVotesServiceServer) GetPetitionInfo(context.Context, *GetVoteInfoRequest) (*GetPetitionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetitionInfo not implemented")
}
func (UnimplementedVotesServiceServer) GetChoiceInfo(context.Context, *GetVoteInfoRequest) (*GetChoiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoiceInfo not implemented")
}
func (UnimplementedVotesServiceServer) VoteRate(context.Context, *VoteRateRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRate not implemented")
}
func (UnimplementedVotesServiceServer) VotePetition(context.Context, *VotePetitionRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePetition not implemented")
}
func (UnimplementedVotesServiceServer) VoteChoice(context.Context, *VoteChoiceRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteChoice not implemented")
}
func (UnimplementedVotesServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedVotesServiceServer) mustEmbedUnimplementedVotesServiceServer() {}
func (UnimplementedVotesServiceServer) testEmbeddedByValue()                      {}

// UnsafeVotesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotesServiceServer will
// result in compilation errors.
type UnsafeVotesServiceServer interface {
	mustEmbedUnimplementedVotesServiceServer()
}

func RegisterVotesServiceServer(s grpc.ServiceRegistrar, srv VotesServiceServer) {
	// If the following call pancis, it indicates UnimplementedVotesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VotesService_ServiceDesc, srv)
}

func _VotesService_GetVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).GetVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_GetVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).GetVotes(ctx, req.(*GetVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_GetRateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).GetRateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_GetRateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).GetRateInfo(ctx, req.(*GetVoteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_GetPetitionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).GetPetitionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_GetPetitionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).GetPetitionInfo(ctx, req.(*GetVoteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_GetChoiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).GetChoiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_GetChoiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).GetChoiceInfo(ctx, req.(*GetVoteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_VoteRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).VoteRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_VoteRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).VoteRate(ctx, req.(*VoteRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_VotePetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotePetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).VotePetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_VotePetition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).VotePetition(ctx, req.(*VotePetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_VoteChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).VoteChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_VoteChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).VoteChoice(ctx, req.(*VoteChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotesService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotesService_ServiceDesc is the grpc.ServiceDesc for VotesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.VotesService",
	HandlerType: (*VotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVotes",
			Handler:    _VotesService_GetVotes_Handler,
		},
		{
			MethodName: "GetRateInfo",
			Handler:    _VotesService_GetRateInfo_Handler,
		},
		{
			MethodName: "GetPetitionInfo",
			Handler:    _VotesService_GetPetitionInfo_Handler,
		},
		{
			MethodName: "GetChoiceInfo",
			Handler:    _VotesService_GetChoiceInfo_Handler,
		},
		{
			MethodName: "VoteRate",
			Handler:    _VotesService_VoteRate_Handler,
		},
		{
			MethodName: "VotePetition",
			Handler:    _VotesService_VotePetition_Handler,
		},
		{
			MethodName: "VoteChoice",
			Handler:    _VotesService_VoteChoice_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _VotesService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/kdt.proto",
}
